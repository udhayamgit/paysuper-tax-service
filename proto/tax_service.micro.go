// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: tax_service.proto

/*
Package tax_service is a generated protocol buffer package.

It is generated from these files:
	tax_service.proto

It has these top-level messages:
	EmptyResponse
	VATRate
	GetRatesQuery
	RateLookupQuery
	GetSingleRateResponse
	GetRatesResponse
*/
package tax_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaxService service

type TaxService interface {
	SetRate(ctx context.Context, in *VATRate, opts ...client.CallOption) (*EmptyResponse, error)
	DeleteRate(ctx context.Context, in *RateLookupQuery, opts ...client.CallOption) (*EmptyResponse, error)
	GetSingleRate(ctx context.Context, in *RateLookupQuery, opts ...client.CallOption) (*GetSingleRateResponse, error)
	GetRates(ctx context.Context, in *GetRatesQuery, opts ...client.CallOption) (*GetRatesResponse, error)
}

type taxService struct {
	c    client.Client
	name string
}

func NewTaxService(name string, c client.Client) TaxService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "tax_service"
	}
	return &taxService{
		c:    c,
		name: name,
	}
}

func (c *taxService) SetRate(ctx context.Context, in *VATRate, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "TaxService.SetRate", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxService) DeleteRate(ctx context.Context, in *RateLookupQuery, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "TaxService.DeleteRate", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxService) GetSingleRate(ctx context.Context, in *RateLookupQuery, opts ...client.CallOption) (*GetSingleRateResponse, error) {
	req := c.c.NewRequest(c.name, "TaxService.GetSingleRate", in)
	out := new(GetSingleRateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxService) GetRates(ctx context.Context, in *GetRatesQuery, opts ...client.CallOption) (*GetRatesResponse, error) {
	req := c.c.NewRequest(c.name, "TaxService.GetRates", in)
	out := new(GetRatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaxService service

type TaxServiceHandler interface {
	SetRate(context.Context, *VATRate, *EmptyResponse) error
	DeleteRate(context.Context, *RateLookupQuery, *EmptyResponse) error
	GetSingleRate(context.Context, *RateLookupQuery, *GetSingleRateResponse) error
	GetRates(context.Context, *GetRatesQuery, *GetRatesResponse) error
}

func RegisterTaxServiceHandler(s server.Server, hdlr TaxServiceHandler, opts ...server.HandlerOption) error {
	type taxService interface {
		SetRate(ctx context.Context, in *VATRate, out *EmptyResponse) error
		DeleteRate(ctx context.Context, in *RateLookupQuery, out *EmptyResponse) error
		GetSingleRate(ctx context.Context, in *RateLookupQuery, out *GetSingleRateResponse) error
		GetRates(ctx context.Context, in *GetRatesQuery, out *GetRatesResponse) error
	}
	type TaxService struct {
		taxService
	}
	h := &taxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaxService{h}, opts...))
}

type taxServiceHandler struct {
	TaxServiceHandler
}

func (h *taxServiceHandler) SetRate(ctx context.Context, in *VATRate, out *EmptyResponse) error {
	return h.TaxServiceHandler.SetRate(ctx, in, out)
}

func (h *taxServiceHandler) DeleteRate(ctx context.Context, in *RateLookupQuery, out *EmptyResponse) error {
	return h.TaxServiceHandler.DeleteRate(ctx, in, out)
}

func (h *taxServiceHandler) GetSingleRate(ctx context.Context, in *RateLookupQuery, out *GetSingleRateResponse) error {
	return h.TaxServiceHandler.GetSingleRate(ctx, in, out)
}

func (h *taxServiceHandler) GetRates(ctx context.Context, in *GetRatesQuery, out *GetRatesResponse) error {
	return h.TaxServiceHandler.GetRates(ctx, in, out)
}
